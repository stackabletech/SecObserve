import os
from datetime import datetime

import requests

from application.core.models import Observation
from application.core.types import ExploitSource
from application.exploits.models import Exploit
from constance import config

def import_vulncheck_kev() -> None:
    vulncheck_api_key = os.getenv("VULNCHECK_API_KEY")

    if not vulncheck_api_key:
        raise ValueError("VULNCHECK_API_KEY environment variable is not set")

    headers = {
        "accept": "application/json",
        "authorization": f"Bearer {vulncheck_api_key}",
    }

    reached_end = False
    start_date = config.VULNCHECK_KEV_LAST_MOD_START_DATE
    if not start_date:
        start_date = "1970-01-01"

    params = {"lastModStartDate": start_date.format("%Y-%m-%d"), "page": 1}

    while not reached_end:
        response = requests.get("https://api.vulncheck.com/v3/index/vulncheck-kev", headers=headers, params=params)
        response.raise_for_status()
        vulncheck_data = response.json()
        if vulncheck_data and "data" in vulncheck_data:
            config.VULNCHECK_KEV_LAST_MOD_START_DATE = datetime.fromisoformat(vulncheck_data["_meta"]["timestamp"][0:19])
            for item in vulncheck_data["data"]:
                if "cve" in item:
                    for cve_id in item["cve"]:
                        Observation.objects.filter(
                            vulnerability_id=cve_id
                        ).update(
                            in_vulncheck_kev=True
                        )
                        if "vulncheck_xdb" in item:
                            Observation.objects.filter(
                                vulnerability_id=cve_id
                            ).update(
                                exploit_available=True
                            )
                            for xdb in item["vulncheck_xdb"]:
                                xdb_id = xdb.get("xdb_id", None)
                                date_added = xdb.get("date_added", None)
                                if date_added:
                                    try:
                                        date_added = datetime.fromisoformat(
                                            date_added.rstrip("Z")
                                        ).strftime("%Y-%m-%d")
                                    except ValueError:
                                        date_added = None
                                if not date_added:
                                    date_added = datetime.now().strftime("%Y-%m-%d")

                                clone_ssh_url = xdb.get("clone_ssh_url", "")

                                if "git@github.com" in clone_ssh_url:
                                    url = clone_ssh_url.replace(
                                        "git@github.com:", "https://github.com/"
                                    ).replace(".git", "")
                                else:
                                    url = clone_ssh_url

                                Exploit.objects.update_or_create(
                                    vulnerability_id=cve_id,
                                    source=ExploitSource.VULNCHECK,
                                    source_id=xdb_id,
                                    defaults={
                                        "url": url,
                                        "created": date_added,
                                    },
                                )
        params["page"] += 1
        reached_end = vulncheck_data["_meta"]["page"] >= vulncheck_data["_meta"]["total_pages"]


def import_github_poc() -> None:
    distinct_cve_ids_from_observations = Observation.objects.filter(
        vulnerability_id__startswith="CVE-"
    ).values_list("vulnerability_id", flat=True).distinct()

    for cve_id in distinct_cve_ids_from_observations:
        response = requests.get("https://poc-in-github.motikan2010.net/api/v1/", params={"cve_id": cve_id, "sort": "stargazers_count"})
        response.raise_for_status()
        data = response.json()

        if "pocs" in data and len(data["pocs"]) > 0:
            Observation.objects.filter(
                vulnerability_id=cve_id
            ).update(
                exploit_available=True
            )
            for poc in data["pocs"]:
                created_at = poc.get("created_at", None)

                if created_at:
                    try:
                        created_at = datetime.fromisoformat(created_at)
                    except ValueError:
                        created_at = None
                if not created_at:
                    created_at = datetime.now().strftime("%Y-%m-%d")

                source_id = poc.get("id", None)
                url = poc.get("html_url", None)

                if source_id and url:
                    Exploit.objects.update_or_create(
                        vulnerability_id=cve_id,
                        source=ExploitSource.POC_IN_GITHUB,
                        source_id=source_id,
                        defaults={
                            "url": url,
                            "created": created_at,
                        },
                    )

# def import_exploit_db() -> None:
#     response = requests.get("https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv?ref_type=heads")
#     response.raise_for_status()

#     decoded_content = response.content.decode("utf-8")
#     csv_reader = csv.reader(decoded_content.splitlines(), delimiter=",")
#     header = next(csv_reader)
#     codes_index = header.index("codes")
#     exploitdb_data = []
#     for row in csv_reader:
#         codes = row[codes_index].split(";")
#         if cve_id in codes:
#             exploitdb_data.append(
#                 {
#                     "id": row[0],
#                     "date": row[3],
#                 }
#             )


#     for data in exploitdb_data:
#         exploit_id = data.get("id", "N/A")
#         date_published = data.get("date", "N/A")
#         url = f"https://www.exploit-db.com/exploits/{exploit_id}"

#         table.append([exploit_id, date_published, url])
