import os
import json
from datetime import datetime, timezone

import requests

from application.core.models import Observation
from application.core.types import ExploitSource
from application.core.models import Exploit
from constance import config

def import_vulncheck_kev() -> None:
    vulncheck_api_key = os.getenv("VULNCHECK_API_KEY")

    if not vulncheck_api_key:
        raise ValueError("VULNCHECK_API_KEY environment variable is not set")

    headers = {
        "accept": "application/json",
        "authorization": f"Bearer {vulncheck_api_key}",
    }

    reached_end = False
    import_started_at = datetime.now(tz=timezone.utc)

    start_date = config.EXPLOITS_LAST_SYNC_VULNCHECK_KEV
    if not start_date:
        start_date = "1970-01-01"

    params = {"lastModStartDate": start_date, "page": 1}

    while not reached_end:
        print(f"Importing vulncheck-kev data for page {params['page']}")
        response = requests.get("https://api.vulncheck.com/v3/index/vulncheck-kev", headers=headers, params=params)
        response.raise_for_status()
        vulncheck_data = response.json()
        if vulncheck_data and "data" in vulncheck_data:
            for item in vulncheck_data["data"]:
                if "cve" in item:
                    for cve_id in item["cve"]:
                        affected_rows = Observation.objects.filter(
                            vulnerability_id=cve_id
                        ).update(
                            in_vulncheck_kev=True
                        )
                        if affected_rows > 0:
                            if "vulncheck_xdb" in item:
                                Observation.objects.filter(
                                    vulnerability_id=cve_id
                                ).update(
                                    exploit_available=True
                                )
                                for xdb in item["vulncheck_xdb"]:
                                    xdb_id = xdb.get("xdb_id", None)
                                    date_added = xdb.get("date_added", None)
                                    if not date_added:
                                        date_added = datetime.now(tz=timezone.utc).isoformat()

                                    clone_ssh_url = xdb.get("clone_ssh_url", "")

                                    if "git@github.com" in clone_ssh_url:
                                        url = clone_ssh_url.replace(
                                            "git@github.com:", "https://github.com/"
                                        ).replace(".git", "")
                                    else:
                                        url = clone_ssh_url

                                    Exploit.objects.update_or_create(
                                        vulnerability_id=cve_id,
                                        source=ExploitSource.VULNCHECK,
                                        source_id=xdb_id,
                                        defaults={
                                            "url": url,
                                            "created": date_added,
                                        },
                                    )
        params["page"] += 1
        print(f"Imported vulncheck-kev data for page {params['page']}, total pages: {vulncheck_data['_meta']['total_pages']}, current page: {vulncheck_data['_meta']['page']}")
        reached_end = vulncheck_data["_meta"]["page"] >= vulncheck_data["_meta"]["total_pages"]

    config.EXPLOITS_LAST_SYNC_VULNCHECK_KEV = import_started_at.strftime("%Y-%m-%d")


def import_github_poc() -> None:
    import_started_at = datetime.now(tz=timezone.utc)
    if os.path.isdir('/tmp/PoC-in-GitHub'):
        os.system("cd /tmp/PoC-in-GitHub && git pull")
    else:
        os.system("git clone https://github.com/nomi-sec/PoC-in-GitHub /tmp/PoC-in-GitHub")

    distinct_cve_ids_from_observations = Observation.objects.filter(
        vulnerability_id__startswith="CVE-"
    ).values_list("vulnerability_id", flat=True).distinct()

    last_sync_timestamp = datetime.strptime(config.EXPLOITS_LAST_SYNC_GITHUB_POC, "%Y-%m-%d").timestamp() if config.EXPLOITS_LAST_SYNC_GITHUB_POC else None

    for cve_id in distinct_cve_ids_from_observations:
        file = f"/tmp/PoC-in-GitHub/" + cve_id[4:8] + "/" + cve_id + ".json"

        if not os.path.isfile(file) or (last_sync_timestamp and os.path.getmtime(file) < last_sync_timestamp):
            continue

        Observation.objects.filter(
            vulnerability_id=cve_id
        ).update(
            exploit_available=True
        )

        f = open(file)
        pocs = json.load(f)

        for poc in pocs:
            created_at = poc.get("created_at", None)

            if not created_at:
                created_at = datetime.now(tz=timezone.utc).isoformat()

            source_id = poc.get("id", None)
            url = poc.get("html_url", None)

            if source_id and url:
                Exploit.objects.update_or_create(
                    vulnerability_id=cve_id,
                    source=ExploitSource.POC_IN_GITHUB,
                    source_id=source_id,
                    defaults={
                        "url": url,
                        "created": created_at,
                    },
                )

    config.EXPLOITS_LAST_SYNC_GITHUB_POC = import_started_at.strftime("%Y-%m-%d")